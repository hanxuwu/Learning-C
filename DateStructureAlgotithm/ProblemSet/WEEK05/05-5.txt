5.(Dijkstra's algorithm)
Trace the execution of Dijkstra's algorithm on the following graph to compute the minimum distances from source node 0 to all other vertices:


Show the values of vSet, dist[] and pred[] after each iteration.

Implement Dijkstra's algorithm in C using your priority queue functions for Exercise 4 and the Weighted Graph ADT (WGraph.h, WGraph.c) from the lecture. Your program should

prompt the user for the number of nodes in a graph,
prompt the user for a source node,
build a weighted undirected graph from user input,
compute and output the distance and a shortest path from the source to every vertex of the graph.
An example of the program executing is shown below. The input graph consists of a simple triangle along with a fourth, disconnected node.


Dijkstra
a.
Initialisation:
Vset={0,1,2,3,4,5,6,7}
dist=[0,$,$,$,$,$,$,$]
pred=[-1,-1,-1,-1,-1,-1,-1,-1]

Vset={-,1,2,3,4,5,6,7}
dist=[0,5,4,6,$,$,$,$]
pred=[0,0,0,0,-1,-1,-1,-1]

Vset={-,1,-,3,4,5,6,7}
dist=[0,5,4,5,7,11,$,$]
pred=[0,0,0,2,2,2,-1,-1]

Vset={-,1,-,3,4,5,6,7}
dist=[0,5,4,5,7,11,$,$]
pred=[0,0,0,2,2,2,-1,-1] 

Vset={-,-,-,3,4,5,6,7}
dist=[0,5,4,5,7,7,12,$]
pred=[0,0,0,2,2,1,1,-1]    

Vset={-,-,-,-,4,5,6,7}
dist=[0,5,4,5,7,7,12,$]
pred=[0,0,0,2,2,1,1,-1] 

Vset={-,-,-,-,-,5,6,7}
dist=[0,5,4,5,7,7,12,15]
pred=[0,0,0,2,2,1,1,4]   

Vset={-,-,-,-,-,-,6,7}
dist=[0,5,4,5,7,7,10,13]
pred=[0,0,0,2,2,1,5,5]  

Vset={-,-,-,-,-,-,-,7}
dist=[0,5,4,5,7,7,10,13]
pred=[0,0,0,2,2,1,5,5]   

Vset={-,-,-,-,-,-,-,-}
dist=[0,5,4,5,7,7,10,13]
pred=[0,0,0,2,2,1,5,5]  


0:distance=0,shortest path: 0
1:distance=5,shortest path: 0-1
2:distance=4,shortest path: 0-2
3:distance=5,shortest path:0-2-3 
4.distance=7,shortest path:0-2-4
5.distance=7,shortest path:0-1-5
6.distance=10,shortest path:0-1-5-6
7.distance=13,shortest path:0-1-5-7







